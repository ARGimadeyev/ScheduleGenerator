1. ОСНОВНАЯ ЧАСТЬ

1.1. Постановка задачи  
Требуется реализовать систему, которая:
- Учитывает ограничения: 
   - Емкость аудиторий
   - График работы преподавателей
   - Минимальные перерывы между занятиями
- Минимизирует: 
   - Количество окон в расписании
   - Пересечения дисциплин

1.2. Алгоритмическое решение  
Основной алгоритм реализован на C++ и включает:
- Поиск в глубину с возвратом (backtracking)
- Эвристическое ветвление для сокращения перебора
- Приоритетную обработку «жестких» ограничений

Пример псевдокода:  
void generateSchedule() {
    while (!queue.empty()) {
        Lesson lesson = queue.pop();
        if (!checkConstraints(lesson))
            backtrack();
        assignTimeSlot(lesson);
    }
}

1.3. Структура данных  
Используемые классы:
- `TimeSlot` (день, время начала, продолжительность)
- `Teacher` (ID, доступные часы)
- `ConstraintChecker` (валидация правил) 
